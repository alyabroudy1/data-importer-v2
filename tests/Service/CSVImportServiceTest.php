<?php

namespace App\Tests\Service;

use Symfony\Bundle\FrameworkBundle\Console\Application;
use Symfony\Bundle\FrameworkBundle\Test\KernelTestCase;
use Symfony\Component\Console\Tester\CommandTester;

class CSVImportServiceTest extends KernelTestCase
{
 private $commandTester;

    protected function setUp(): void
    {
        $kernel = self::bootKernel();
        $application = new Application($kernel);

        $application->setAutoExit(false);

        $command = $application->find('data:import');
        $this->commandTester = new CommandTester($command);
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function testWithEmptyFilePath(){
        $this->commandTester->execute([
            // pass arguments to the helper
            'filePath' => '',
        ]);
        // the output of the command in the console
        $output = $this->commandTester->getDisplay();

        $expectedMessage = "[ERROR] Lese Fehler: [File-pfad ist erforderlich]";
        $this->assertStringContainsString($expectedMessage, $output);
    }

    public function testValidFilePath(){
        $this->commandTester->execute([
            // pass arguments to the helper
            'filePath' => 'src/import/Cars_5.csv',
        ]);
        // the output of the command in the console
        $output = $this->commandTester->getDisplay();
        $expectedMessage = "[INFO] Sie haben eine [csv] Datei-Pfad gegeben";
        $this->assertStringContainsString($expectedMessage, $output);
    }

    public function testInvalidFilePath(){
        $this->commandTester->execute([
            // pass arguments to the helper
            'filePath' => 'src/import/Cars_not_found.csv',
        ]);
        // the output of the command in the console
        $output = $this->commandTester->getDisplay();
        $expectedMessage = "[ERROR] Lese Fehler: [File-pfad [src/import/Cars_not_found.csv] wurde nicht gefunden]";
        $this->assertStringContainsString($expectedMessage, $output);
    }

    public function testUnsupportedFileType(){
        $this->commandTester->execute([
            // pass arguments to the helper
            'filePath' => 'src/import/Cars_5.xml',
        ]);
        // the output of the command in the console
        $output = $this->commandTester->getDisplay();
        $expectedMessage = "[ERROR] Data-type Fehler: xml Datei-typ ist momentan nicht unterstÃ¼tzt";
        $this->assertStringContainsString($expectedMessage, $output);
    }

    public function testReadAndCountDataRows(){
        $this->commandTester->execute([
            // pass arguments to the helper
            'filePath' => 'src/import/Cars.csv',
        ]);
        // the output of the command in the console
        $output = $this->commandTester->getDisplay();
        $expectedMessage = "[INFO] [800] Datensatz mit folgende Attribute wurde gefunden";

        $this->assertStringContainsString($expectedMessage, $output);
    }

    public function testReadDataHeaders(){
        $this->commandTester->execute([
            // pass arguments to the helper
            'filePath' => 'src/import/Cars.csv',
        ]);
        // the output of the command in the console
        $output = $this->commandTester->getDisplay();
        $expectedMessage = "id   model   year   url   color   material   image";
        $this->assertStringContainsString($expectedMessage, $output);
    }

    public function testReadDatabaseHeaders(){
        $this->commandTester->execute([
            // pass arguments to the helper
            'filePath' => 'src/import/Cars.csv',
        ]);
        // the output of the command in the console
        $output = $this->commandTester->getDisplay();
        $expectedMessage = "[INFO] Data Table [Cars] mit folgende Attribute ist schon existiert:";
        $this->assertStringContainsString($expectedMessage, $output);
    }

    public function testCompareDataHeadersToDatabase(){
        $data = [
            'foo' => 'aaa',
            'bar' => [
                ['id' => 111, 1 => 'bbb'],
                ['lorem' => 'ipsum'],
            ]
        ];

        file_put_contents(
            'data.csv',
            $container->get('serializer')->encode($data, 'csv')
        );

        $this->commandTester->execute([
            // pass arguments to the helper
            'filePath' => 'src/import/Cars_fehlerhafte_3.csv',
        ]);
        // the output of the command in the console
        $output = $this->commandTester->getDisplay();
        $expectedMessage = "[INFO] Data Table [Cars] mit folgende Attribute ist schon existiert:";
        dump($output);
        $this->assertStringContainsString($expectedMessage, $output);
    }
}